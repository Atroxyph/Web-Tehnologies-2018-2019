<?php

	require_once("Exploit.php");

	/*
	 * class whose instance represents the view part of the software vulnerability search functionality
	 */
	class ExploitView {

		private $description;
		private $currPage;
		private $noOfShownPageLinks;
		private $totalResults;
		private $resultsPerPage;

		/*
		 * the maximum no. of read characters from a property's value
		 *  (prevents the echoing of very long description or code segments of an exploit)
		 */ 
		private $maxNoOfPropReadChars;

		public function __construct($description, $currPage, $noOfShownPageLinks, $totalResults, $resultsPerPage, $maxNoOfPropReadChars) {

			$this->description = $description;
			$this->currPage = $currPage;
			$this->noOfShownPageLinks = $noOfShownPageLinks;
			$this->totalResults = $totalResults;
			$this->resultsPerPage = $resultsPerPage;
			$this->maxNoOfPropReadChars = $maxNoOfPropReadChars;

		}

		/*
		 * @param $exploit the exploit whose properties we ought to print
		 * prints all key-value pairs of all properties of an exploit
		 */
		public function printExploitInfo($exploitList) {

			/*
			 * start echoing the query results
			 */
			echo "<div class='searchResults'>";

			echo "<div>";
			echo "Searching for " . $this->description . "..." . "<br/>";
			echo "Found " . $this->totalResults . " matches." . "<br/><br/>";
			echo "</div>";

			foreach ($exploitList as $exploit) {

				echo "<div>";
				echo "<h3>Exploit " . $exploit->_id . ":" . "</h3>";
				echo "<ul>";

				foreach(Exploit::getObjectPropNameList() as $propName) {
					if ($exploit->getValueOfProp($propName) !== null) {
						ExploitView::echoProperty($exploit->getValueOfProp($propName), $propName);
					}
				}

				echo "</ul>";
				echo "</div>";
			}

			echo "</div>";

			$this->printResPageAnchors();

		} // END of printExploitInfo()

		/*
		 * TODO refactor parameter names
		 * 
		 * @param $prop the property value
		 * @param $propName the property name
		 * Cross Site Scripting (XSS) - proof method that echoes given property from an exploit (e.g Author, Source etc)
		 */
		private function echoProperty($prop, $propName) {

			if (is_array($prop)) {
				foreach ($prop as $subProp) {
					echo "<li>" . $propName . ": " . htmlspecialchars($this->extractPartialPropVal($subProp, $this->maxNoOfPropReadChars) , ENT_QUOTES, "UTF-8") . "</li>";
				}
			}
			else if (is_string($prop)) {
				echo "<li>" . $propName . ": " . htmlspecialchars($this->extractPartialPropVal($prop, $this->maxNoOfPropReadChars), ENT_QUOTES, "UTF-8") . "</li>";
			}

		} // END of echoProperty()


		/*
		 * print the links to the other results (if any exist)
		 */
		private function printResPageAnchors() {

			echo "<ul>";

			/*
			 * echo links to other pages containing further exploit results
			 */
			$currPageIndex = $this->currPage - 1;
			$lastShownPageLinkIndex = $currPageIndex + $this->noOfShownPageLinks - 1;

			$query = $_GET;
			$query["page"] = 1;
			$query = http_build_query($query);

			echo "<li><a href=" . $_SERVER["PHP_SELF"] . "?" . $query . ">" . " Page 1</a></li>";

			if ($currPageIndex > 0)
				echo "..." . "<br/>";

			for ($i = $currPageIndex + 1; $i < ceil($this->totalResults / $this->resultsPerPage); $i++) {
				if ($i === $lastShownPageLinkIndex) {
					if ($lastShownPageLinkIndex !== ceil($this->totalResults / $this->resultsPerPage) - 1) {
						echo "..." . "<br/>";
						$i = ceil($this->totalResults / $this->resultsPerPage) - 1;
					}
				}

				/*
			 	 * rebuild the GET query to change the page we are on
			  	 */
				$query = $_GET;
				$query["page"] = $i + 1;
				$query = http_build_query($query);

				echo "<li><a href=" . $_SERVER["PHP_SELF"] . "?" . $query . ">" . " Page " . ($i + 1) . "</a></li>";
			}

			echo "</ul>";

		} // END of printResPageAnchors()


		/*
		 * @param $propVal the value of a property
		 * @param $noOfCharsToExtract the no. of characters to extract from the given prop. value
		 * returns a specific number of characters from the given prop. value and appends '[...]' to the return value
		 *  in case the given prop. value is smaller than the no. of characters to extract
		 */
		private function extractPartialPropVal($propVal, $noOfCharsToExtract) {

			return (strlen($propVal) > $noOfCharsToExtract) ? 
				(substr($propVal, 0, $noOfCharsToExtract) . "[...]") :
				(substr($propVal, 0, $noOfCharsToExtract)) 
			;

		} // END of extractPartialPropVal()

	}

	

?>