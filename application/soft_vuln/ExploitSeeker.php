<?php

	/**
	 * @author Paul-Reftu
	 */

	require_once("Exploit.php");

	/**
	 * class whose instance executes a search w/ Shodan's API to find a particular exploit
	 */
	class ExploitSeeker {

		/*
		 * key that allows us to use the API 
		 * current key belongs to Paul Reftu
		 */
		const API_KEY = "X12vohw0JQtdIemto29dopVevQKhM8kB";
		/*
		 * root URL for our exploit queries
		 */
		const API_ROOT_URL = "https://exploits.shodan.io/api/search?";

		private $currPage;
		private $resultsPerPage;
		private $shodanResultsPerPage;
		private $decodedResults;

		/**
		 * @param $currPage
		 * @param $resultsPerPage
		 * @param $shodanResultsPerPage how many results does Shodan's API provide per page (currently 100)
		 *
		 * construct 'ExploitSeeker' object and initialize above parameters in the object
		 *
		 * the last two parameters are not required (you can pass null instead) 
		  - the API search method returning a max. of 100 exploits based on the $currPage parameter in this case
		 */
		public function __construct($currPage, $resultsPerPage, $shodanResultsPerPage) {

			$this->currPage = $currPage;
			$this->resultsPerPage = $resultsPerPage;
			$this->shodanResultsPerPage = $shodanResultsPerPage;

		}

		/**
		 * @param $description the description to use for the search (e.g 'google')
		 * @return the decoded JSON object representing the list of found exploits
		 * uses Shodan's API to perform an exploit search w.r.t the given description received through GET
		 */
		public function runShodanAPISearch($description) {

			/*
			 * get JSON file provided by Shodan's API (an example query would be: https://exploits.shodan.io/api/search?query=description=google&page=2&key={API_KEY})
			*/ 
			if ($this->resultsPerPage !== null && $this->shodanResultsPerPage !== null) {

				$results = file_get_contents(self::API_ROOT_URL . "query=" . $description . "&page=" . ceil(($this->currPage * $this->resultsPerPage) / $this->shodanResultsPerPage) . "&key=" . self::API_KEY);

			}
			else {

				$results = file_get_contents(self::API_ROOT_URL . "query=" . $description . "&page=" . $this->currPage . "&key=" . self::API_KEY);

			}


			/*
			 * decode JSON file into a useable PHP object
			 */
			$this->decodedResults = json_decode($results);

			/*
			 * check for errors on decoding
			 */
			if ($this->decodedResults === null) {
				echo "<h3>No results found</h3>";

				switch (json_last_error()) {
					case JSON_ERROR_NONE:
						echo "JSON_ERROR_NONE";
						break;
					case JSON_ERROR_DEPTH:
						echo "JSON_ERROR_DEPTH";
						break;
					case JSON_ERROR_STATE_MISMATCH:
						echo "JSON_ERROR_STATE_MISMATCH";
						break;
					case JSON_ERROR_CTRL_CHAR:
						echo "JSON_ERROR_CTRL_CHAR";
						break;
					case JSON_ERROR_SYNTAX:
						echo "JSON_ERROR_SYNTAX";
						break;
					case JSON_ERROR_UTF8:
						echo "JSON_ERROR_UTF8";
						break;
					case JSON_ERROR_RECURSION:
						echo "JSON_ERROR_RECURSION";
						break;
					case JSON_ERROR_INF_OR_NAN:
						echo "JSON_ERROR_INF_OR_NAN";
						break;
					case JSON_ERROR_UNSUPPORTED_TYPE;
						echo "JSON_ERROR_UNSUPPORTED_TYPE";
							break;
					case JSON_ERROR_INVALID_PROPERTY_NAME:
						echo "JSON_ERROR_INVALID_PROPERTY_NAME";
						break;
					case JSON_ERROR_UTF16:
						echo "JSON_ERROR_UTF16";
						break;
					default:
						echo "UNKNOWN JSON ERROR";
						break;
				}
			} // end of error checking on JSON decoding

			return $this->decodedResults;

		} // END of runShodanAPISearch()

		/**
		 * @return the list of exploits w.r.t the current object's decoded results (the returned object will be an array of 'Exploit'-type objects)
		 */
		public function getExploitList() {

			$exploitList = array();

			for ($i = (($this->currPage - 1) * $this->resultsPerPage) % $this->shodanResultsPerPage; $i < sizeof($this->decodedResults->matches) && $i < ($this->currPage - 1) * $this->resultsPerPage % $this->shodanResultsPerPage + $this->resultsPerPage; $i++) {

				$match = $this->decodedResults->matches[$i];
				array_push($exploitList, new Exploit($match));

			}

			return $exploitList;

		} // END of getExploitList()

	}

?>