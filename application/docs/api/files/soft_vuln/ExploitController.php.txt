<?php

	/**
	 * @author Paul-Reftu
	 */

	require_once("NotAnExploitException.php");
	require_once("NotAnExploitViewException.php");
	require_once("NotAnExploitListException.php");
	require_once("Exploit.php");
	require_once("ExploitView.php");

	/**
	 * class whose instance represents the controller part of the software vulnerability search functionality
	 */
	class ExploitController {

		private $model;
		private $view;

		/**
		 * @param $model
		 * @param $view
		 * @throws NotAnExploitListException
		 * @throws NotAnExploitViewException
		 * constructs a new 'ExploitController' instance w/ given model and view
		 */
		public function __construct($model, $view) {

			if (!$this->isObjectAnExploitList($model))
				throw new NotAnExploitListException("ErrorList");

			if (!$view instanceof ExploitView)
				throw new NotAnExploitViewException();

			$this->model = $model;
			$this->view = $view;

		} // END of __construct()

		/**
		 * @param $newModel the new model to replace the current one
		 * @throws NotAnExploitListException
		 * updates the model
		 */
		public function updateModel($newModel) {

			if (!$this->isObjectAnExploitList($model))
				throw new NotAnExploitListException();

			$this->model = $newModel;

		} // END of updateModel()

		/**
		 * updates the view, taking into account the currently declared model
		 */
		public function updateView() {

			$this->view->printExploitInfo($this->model);

		} // END of updateView()

		/**
		 * @param $list the list to check
		 * @return true if the object is an list of 'Exploit'-type objects, false otherwise
		 * checks if the given list is a list of 'Exploit' objects
		 */
		private function isObjectAnExploitList($list) {

			if (!is_array($list))
				return false;

			foreach ($list as $modelElem) {
				if (!$modelElem instanceof Exploit)
					return false;
			}

			return true;

		} // END of isObjectAnExploitList()

	}


?>
